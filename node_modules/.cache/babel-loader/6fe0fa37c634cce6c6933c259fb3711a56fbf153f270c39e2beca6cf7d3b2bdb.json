{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\art03\\\\appointment-planner-starting-v18\\\\src\\\\containers\\\\contactsPage\\\\ContactsPage.js\",\n  _s = $RefreshSig$();\n/*\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { ContactForm } from \"../../components/contactForm/ContactForm\";\r\nimport { TileList } from \"../../components/tileList/TileList\";\r\n\r\nexport const ContactsPage = ({ contacts, addContact }) => {\r\n  // Define state variables for contact info and duplicate check\r\n  const [name, setName] = useState('');\r\n  const [phone, setPhone] = useState('');\r\n  const [email, setEmail] = useState('');\r\n  const [isDuplicate, setIsDuplicate] = useState(false);\r\n\r\n  // Check for duplicate names whenever the name state changes\r\n  useEffect(() => {\r\n    setIsDuplicate(contacts.some(contact => contact.name === name));\r\n  }, [name, contacts]);\r\n\r\n  // Handle form submission\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    \r\n    // Check if the name is not a duplicate\r\n    if (!isDuplicate) {\r\n      // Add the new contact and clear the form data\r\n      addContact(name, phone, email);\r\n      setName('');\r\n      setPhone('');\r\n      setEmail('');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <section>\r\n        <h2>Add Contact</h2>\r\n        <ContactForm\r\n          name={name}\r\n          phone={phone}\r\n          email={email}\r\n          setName={setName}\r\n          setPhone={setPhone}\r\n          setEmail={setEmail}\r\n          handleSubmit={handleSubmit}\r\n          isDuplicate={isDuplicate}\r\n        />\r\n      </section>\r\n      <hr />\r\n      <section>\r\n        <h2>Contacts</h2>\r\n        <TileList data={contacts} />\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n*/\n\nimport React, { useState, useEffect } from \"react\";\nimport { ContactForm } from \"../../components/contactForm/ContactForm\";\nimport { TileList } from \"../../components/tileList/TileList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ContactsPage = _ref => {\n  _s();\n  let {\n    contacts,\n    addContact\n  } = _ref;\n  // Define state variables for contact info\n  const [name, setName] = useState(\"\");\n  const [phone, setPhoneNumber] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [isDuplicate, setIsDuplicate] = useState(false);\n\n  // Callback function to handle form submission\n  const handleSubmit = e => {\n    e.preventDefault();\n    // Check for duplicates and add a new contact if not a duplicate\n    const isNameDuplicate = contacts.some(contact => contact.name === name);\n    if (!isNameDuplicate) {\n      addContact(name, phoneNumber, email);\n      // Clear form data\n      setName(\"\");\n      setPhoneNumber(\"\");\n      setEmail(\"\");\n      setIsDuplicate(false);\n    } else {\n      setIsDuplicate(true);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Add Contact\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ContactForm, {\n        name: name,\n        setName: setName,\n        phoneNumber: phoneNumber,\n        setPhoneNumber: setPhoneNumber,\n        email: email,\n        setEmail: setEmail,\n        handleSubmit: handleSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), isDuplicate && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Name is a duplicate.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Contacts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TileList, {\n        data: contacts\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n};\n_s(ContactsPage, \"odqyEoMNj7/7TMiBj3JUN+3gtvY=\");\n_c = ContactsPage;\nvar _c;\n$RefreshReg$(_c, \"ContactsPage\");","map":{"version":3,"names":["React","useState","useEffect","ContactForm","TileList","jsxDEV","_jsxDEV","ContactsPage","_ref","_s","contacts","addContact","name","setName","phone","setPhoneNumber","email","setEmail","isDuplicate","setIsDuplicate","handleSubmit","e","preventDefault","isNameDuplicate","some","contact","phoneNumber","children","fileName","_jsxFileName","lineNumber","columnNumber","data","_c","$RefreshReg$"],"sources":["C:/Users/art03/appointment-planner-starting-v18/src/containers/contactsPage/ContactsPage.js"],"sourcesContent":["/*\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { ContactForm } from \"../../components/contactForm/ContactForm\";\r\nimport { TileList } from \"../../components/tileList/TileList\";\r\n\r\nexport const ContactsPage = ({ contacts, addContact }) => {\r\n  // Define state variables for contact info and duplicate check\r\n  const [name, setName] = useState('');\r\n  const [phone, setPhone] = useState('');\r\n  const [email, setEmail] = useState('');\r\n  const [isDuplicate, setIsDuplicate] = useState(false);\r\n\r\n  // Check for duplicate names whenever the name state changes\r\n  useEffect(() => {\r\n    setIsDuplicate(contacts.some(contact => contact.name === name));\r\n  }, [name, contacts]);\r\n\r\n  // Handle form submission\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    \r\n    // Check if the name is not a duplicate\r\n    if (!isDuplicate) {\r\n      // Add the new contact and clear the form data\r\n      addContact(name, phone, email);\r\n      setName('');\r\n      setPhone('');\r\n      setEmail('');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <section>\r\n        <h2>Add Contact</h2>\r\n        <ContactForm\r\n          name={name}\r\n          phone={phone}\r\n          email={email}\r\n          setName={setName}\r\n          setPhone={setPhone}\r\n          setEmail={setEmail}\r\n          handleSubmit={handleSubmit}\r\n          isDuplicate={isDuplicate}\r\n        />\r\n      </section>\r\n      <hr />\r\n      <section>\r\n        <h2>Contacts</h2>\r\n        <TileList data={contacts} />\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n*/\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { ContactForm } from \"../../components/contactForm/ContactForm\";\r\nimport { TileList } from \"../../components/tileList/TileList\";\r\n\r\nexport const ContactsPage = ({ contacts, addContact }) => {\r\n  // Define state variables for contact info\r\n  const [name, setName] = useState(\"\");\r\n  const [phone, setPhoneNumber] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [isDuplicate, setIsDuplicate] = useState(false);\r\n\r\n  // Callback function to handle form submission\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    // Check for duplicates and add a new contact if not a duplicate\r\n    const isNameDuplicate = contacts.some((contact) => contact.name === name);\r\n    if (!isNameDuplicate) {\r\n      addContact(name, phoneNumber, email);\r\n      // Clear form data\r\n      setName(\"\");\r\n      setPhoneNumber(\"\");\r\n      setEmail(\"\");\r\n      setIsDuplicate(false);\r\n    } else {\r\n      setIsDuplicate(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <section>\r\n        <h2>Add Contact</h2>\r\n        <ContactForm\r\n          name={name}\r\n          setName={setName}\r\n          phoneNumber={phoneNumber}\r\n          setPhoneNumber={setPhoneNumber}\r\n          email={email}\r\n          setEmail={setEmail}\r\n          handleSubmit={handleSubmit}\r\n        />\r\n        {isDuplicate && <p>Name is a duplicate.</p>}\r\n      </section>\r\n      <hr />\r\n      <section>\r\n        <h2>Contacts</h2>\r\n        <TileList data={contacts} />\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}